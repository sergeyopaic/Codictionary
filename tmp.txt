import 'package:flutter/material.dart';

/// A simple pop-up dialog for creating a new vocabulary.
/// No persistence logic is included; caller may read the result and act later.
class CreateVocabularyDialog extends StatefulWidget {
  const CreateVocabularyDialog({super.key});

  @override
  State<CreateVocabularyDialog> createState() => _CreateVocabularyDialogState();
}

class _CreateVocabularyDialogState extends State<CreateVocabularyDialog> {
  final TextEditingController nameController = TextEditingController();
  final TextEditingController descController = TextEditingController();
  final _formKey = GlobalKey<FormState>();
  int selectedIcon = 1;

  List<String> get iconPaths => List.generate(
    14,
    (i) => 'assets/media/icons/new_dictionary/${i + 1}.png',
  );

  Widget _iconImage(String primaryPath, String altPath, double logicalWidth) {
    final dpr = MediaQuery.of(context).devicePixelRatio;
    final targetWidth = (logicalWidth * dpr).round();
    return Image.asset(
      primaryPath,
      fit: BoxFit.contain,
      cacheWidth: targetWidth,
      filterQuality: FilterQuality.high,
      errorBuilder: (context, error, stack) => Image.asset(
        altPath,
        fit: BoxFit.contain,
        cacheWidth: targetWidth,
        filterQuality: FilterQuality.high,
        errorBuilder: (c, e, s) => const Icon(Icons.image_not_supported),
      ),
    );
  }

  @override
  void dispose() {
    nameController.dispose();
    descController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: const Text('Create Vocabulary'),
      content: Form(
        key: _formKey,
        child: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextFormField(
                controller: nameController,
                autofocus: true,
                decoration: const InputDecoration(labelText: 'Name'),
                textInputAction: TextInputAction.next,
                validator: (v) {
                  if (v == null || v.trim().isEmpty) {
                    return 'Please enter a name';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 8),
              TextFormField(
                controller: descController,
                decoration: const InputDecoration(
                  labelText: 'Description (optional)',
                ),
                minLines: 1,
                maxLines: 3,
              ),
              const SizedBox(height: 12),
              Align(
                alignment: Alignment.centerLeft,
                child: Text(
                  'Icon',
                  style: Theme.of(context).textTheme.labelLarge,
                ),
              ),
              const SizedBox(height: 6),
              Row(
                children: [
                  Container(
                    width: 72,
                    height: 72,
                    decoration: BoxDecoration(
                      color: Theme.of(
                        context,
                      ).colorScheme.surfaceContainerHighest,
                      borderRadius: BorderRadius.circular(8),
                      border: Border.all(color: Theme.of(context).dividerColor),
                    ),
                    child: Padding(
                      padding: const EdgeInsets.all(8),
                      child: _iconImage(
                        'assets/media/icons/new_dictionary/${selectedIcon.toString()}.png',
                        'assets/media/icons/${selectedIcon.toString()}.png',
                        56, // 72 - padding * 2 => approx content width
                      ),
                    ),
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: Text(
                      'Tap an icon below to choose',
                      style: Theme.of(context).textTheme.bodySmall,
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 8),
              SizedBox(
                height: 84,
                child: SingleChildScrollView(
                  scrollDirection: Axis.horizontal,
                  child: Row(
                    children: [
                      for (int index = 0; index < iconPaths.length; index++)
                        Padding(
                          padding: EdgeInsets.only(
                            right: index == iconPaths.length - 1 ? 0 : 8,
                          ),
                          child: InkWell(
                            onTap: () =>
                                setState(() => selectedIcon = index + 1),
                            borderRadius: BorderRadius.circular(8),
                            child: Container(
                              width: 84,
                              padding: const EdgeInsets.all(6),
                              decoration: BoxDecoration(
                                borderRadius: BorderRadius.circular(8),
                                border: Border.all(
                                  color: (selectedIcon == index + 1)
                                      ? Theme.of(context).colorScheme.primary
                                      : Theme.of(context).dividerColor,
                                  width: (selectedIcon == index + 1) ? 2 : 1,
                                ),
                                color: Theme.of(
                                  context,
                                ).colorScheme.surfaceContainerHighest,
                              ),
                              child: _iconImage(
                                iconPaths[index],
                                'assets/media/icons/${index + 1}.png',
                                72 - 12, // tile width 84 - padding 6*2
                              ),
                            ),
                          ),
                        ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(null),
          child: const Text('Cancel'),
        ),
        FilledButton(
          onPressed: () {
            if (!_formKey.currentState!.validate()) return;
            Navigator.of(context).pop({
              'name': nameController.text.trim(),
              'description': descController.text.trim(),
              'icon':
                  'assets/media/icons/new_dictionary/'
                  '${selectedIcon.toString()}.png',
            });
          },
          child: const Text('Create'),
        ),
      ],
    );
  }
}

Future<Map<String, String>?> showCreateVocabularyDialog(BuildContext context) {
  return showDialog<Map<String, String>?>(
    context: context,
    barrierDismissible: true,
    builder: (_) => const CreateVocabularyDialog(),
  );
}

